<?xml version="1.0" encoding="UTF-8"?> <rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"> <channel> <title>Arpith K</title> <description>I am a research student in the department of Computer Science and Automation at Indian Institute of Science (IISc). Welcome to my site. </description> <link>http://arpith.xyz/</link> <atom:link href="http://arpith.xyz/feed.xml" rel="self" type="application/rss+xml"/> <pubDate>Tue, 18 Oct 2016 09:38:12 +0530</pubDate> <lastBuildDate>Tue, 18 Oct 2016 09:38:12 +0530</lastBuildDate> <generator>Jekyll v3.2.0</generator> <item> <title>Modifying the Android Source to Cheat in Pokémon GO</title> <description>&lt;p&gt;Most Android devices have an ability to enable mock locations under developer options. As the name would suggest, it can be used to specify a different location from where you actually are.&lt;/p&gt; &lt;p&gt;This is perfect for Pokemon Go! Theoretically, one could spoof the location and let a bot do all the walking from the comfort of the couch.&lt;/p&gt; &lt;p&gt;But the developers at Niantic, Inc are smart. They detect spoofed locations and all that you are presented with is this….&lt;/p&gt; &lt;center&gt; &lt;figure&gt; &lt;a href=&quot;/assets/blog/pokemon/mock_location_fail.png&quot;&gt; &lt;img src=&quot;/assets/blog/pokemon/mock_location_fail.jpg&quot; alt=&quot;Mock Location Fail&quot; height=&quot;500px&quot; /&gt; &lt;/a&gt; &lt;figcaption align=&quot;center&quot;&gt;:(&lt;/figcaption&gt; &lt;/figure&gt; &lt;/center&gt; &lt;p&gt;This detection feature can only be as good as the underlying platform. &lt;i&gt;The trick is to sabotage the Android source on which Niantic relies to detect spoofed location.&lt;/i&gt;&lt;/p&gt; &lt;p&gt;To do this,&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Download the Android Source code. &lt;br /&gt; I decided to work with &lt;a href=&quot;https://github.com/PureNexusProject&quot; target=&quot;_blank&quot;&gt;PureNexus Project&lt;/a&gt; for my Nexus 6P.&lt;/li&gt; &lt;li&gt;Open &lt;code class=&quot;highlighter-rouge&quot;&gt;frameworks/base/location/java/android/location/Location.java&lt;/code&gt;&lt;/li&gt; &lt;li&gt;Modify the function &lt;code class=&quot;highlighter-rouge&quot;&gt;isFromMockProvider()&lt;/code&gt; so that it always returns &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;center&gt; &lt;figure&gt; &lt;a href=&quot;/assets/blog/pokemon/modified-source.png&quot;&gt; &lt;img src=&quot;/assets/blog/pokemon/modified-source.png&quot; alt=&quot;Mock Location Fail&quot; width=&quot;93%&quot; /&gt; &lt;/a&gt; &lt;/figure&gt; &lt;/center&gt; &lt;ul&gt; &lt;li&gt;Build the modified source. &lt;br /&gt; This step can be tricky and can test your proficiency with computers. There are various sources online where one can learn to do this.&lt;/li&gt; &lt;/ul&gt; &lt;center&gt; &lt;figure&gt; &lt;a href=&quot;/assets/blog/pokemon/compile_done2.png&quot;&gt; &lt;img src=&quot;/assets/blog/pokemon/compile_done2.png&quot; /&gt; &lt;/a&gt; &lt;/figure&gt; &lt;/center&gt; &lt;ul&gt; &lt;li&gt;Use an app to mock location and simulate walking along a predefined path. &lt;br /&gt; I found &lt;a href=&quot;https://play.google.com/store/apps/details?id=ru.gavrikov.mocklocations&quot; target=&quot;_blank&quot;&gt;Mock Locations app on Play Store&lt;/a&gt; to be perfect for the job.&lt;/li&gt; &lt;/ul&gt; &lt;center&gt; &lt;figure&gt; &lt;a href=&quot;/assets/blog/pokemon/mock_locaton_app.png&quot;&gt; &lt;img src=&quot;/assets/blog/pokemon/mock_locaton_app.png&quot; alt=&quot;Mock Location Application&quot; /&gt; &lt;/a&gt; &lt;/figure&gt; &lt;/center&gt; &lt;ul&gt; &lt;li&gt;That’s it! Time to sit back, relax and let a bot do all the walking.&lt;/li&gt; &lt;/ul&gt; &lt;center&gt; &lt;figure&gt; &lt;a href=&quot;/assets/blog/pokemon/mock_location_win.png&quot;&gt; &lt;img src=&quot;/assets/blog/pokemon/mock_location_win.jpg&quot; alt=&quot;Mock Location Win!&quot; height=&quot;500px&quot; /&gt; &lt;/a&gt; &lt;figcaption align=&quot;center&quot;&gt;:D&lt;/figcaption&gt; &lt;/figure&gt; &lt;/center&gt; &lt;p class=&quot;info&quot;&gt; In case you're using a Nexus 6P, you may use a build of PureNexus ROM modified by me.&lt;br /&gt; Download &lt;a href=&quot;https://www.androidfilehost.com/?fid=24591000424947374&quot; target=&quot;_blank&quot;&gt;&lt;u&gt;pure_nexus_angler-6.0.1-20160714-mocklocation.zip&lt;/u&gt;&lt;/a&gt; [&lt;a href=&quot;https://1drv.ms/u/s!AoOzO1fpQCLXl1fxfgs9k-HXSp8j&quot; target=&quot;_blank&quot;&gt;&lt;u&gt;mirror&lt;/u&gt;&lt;/a&gt;] &lt;/p&gt; &lt;hr /&gt; &lt;p&gt;&lt;br /&gt; &lt;b&gt;PS:&lt;/b&gt; &lt;br /&gt; Well, all said and done, I would still recommend that you play this game the way developers intended it to. Pokemon Go is all about exploring your surroundings and interacting with friends in creative ways. There’s really no fun in letting a bot do this for you.&lt;/p&gt; </description> <pubDate>Fri, 15 Jul 2016 00:00:00 +0530</pubDate> <link>http://arpith.xyz/2016/07/modifying-android-source-to-cheat-in-pokemon-go/</link> <guid isPermaLink="true">http://arpith.xyz/2016/07/modifying-android-source-to-cheat-in-pokemon-go/</guid> <category>android</category> <category>os</category> <category>blog</category> </item> <item> <title>Installing LLVM from Source on Ubuntu 16.04</title> <description>&lt;center&gt; &lt;img src=&quot;/assets/llvm/LLVM-Logo-Derivative-4.png&quot; /&gt; &lt;/center&gt; &lt;p&gt;&lt;br /&gt;&lt;/p&gt; &lt;h2&gt;Table Of Contents&lt;/h2&gt; &lt;ul id=&quot;markdown-toc&quot;&gt; &lt;li&gt;&lt;a href=&quot;#download-source-code&quot; id=&quot;markdown-toc-download-source-code&quot;&gt;Download Source Code&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#configure-llvm-and-clang&quot; id=&quot;markdown-toc-configure-llvm-and-clang&quot;&gt;Configure LLVM and Clang&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#using-ninja-to-build-llvm-and-clang&quot; id=&quot;markdown-toc-using-ninja-to-build-llvm-and-clang&quot;&gt;Using Ninja to build LLVM and Clang&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#install-llvm&quot; id=&quot;markdown-toc-install-llvm&quot;&gt;Install LLVM&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#updating-source&quot; id=&quot;markdown-toc-updating-source&quot;&gt;Updating Source&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This is a quick guide on building LLVM and Clang from source and installing them on a machine running Ubuntu 16.04 using Ninja build system.&lt;/p&gt; &lt;h2 id=&quot;download-source-code&quot;&gt;Download Source Code&lt;/h2&gt; &lt;p&gt;The first step is to download the source from llvm’s repository. To do so,&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Checkout LLVM:&lt;/li&gt; &lt;/ul&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$cd&lt;/span&gt; where-you-want-llvm-to-live &lt;span class=&quot;nv&quot;&gt;$svn&lt;/span&gt; co http://llvm.org/svn/llvm-project/llvm/trunk llvm &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;ul&gt; &lt;li&gt;Checkout Clang:&lt;/li&gt; &lt;/ul&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$cd&lt;/span&gt; llvm/tools &lt;span class=&quot;nv&quot;&gt;$svn&lt;/span&gt; co http://llvm.org/svn/llvm-project/cfe/trunk clang &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;ul&gt; &lt;li&gt;Checkout Compiler-RT (required to build the sanitizers) [Optional]:&lt;/li&gt; &lt;/ul&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$cd&lt;/span&gt; ../projects &lt;span class=&quot;nv&quot;&gt;$svn&lt;/span&gt; co http://llvm.org/svn/llvm-project/compiler-rt/trunk compiler-rt &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;ul&gt; &lt;li&gt;Checkout Libomp (required for OpenMP support) [Optional]:&lt;/li&gt; &lt;/ul&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$svn&lt;/span&gt; co http://llvm.org/svn/llvm-project/openmp/trunk openmp &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;ul&gt; &lt;li&gt;Checkout libcxx and libcxxabi [Optional]:&lt;/li&gt; &lt;/ul&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$svn&lt;/span&gt; co http://llvm.org/svn/llvm-project/libcxx/trunk libcxx &lt;span class=&quot;nv&quot;&gt;$svn&lt;/span&gt; co http://llvm.org/svn/llvm-project/libcxxabi/trunk libcxxabi &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;ul&gt; &lt;li&gt;Get the Test Suite Source Code [Optional]&lt;/li&gt; &lt;/ul&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$svn&lt;/span&gt; co http://llvm.org/svn/llvm-project/test-suite/trunk &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;-suite &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;h2 id=&quot;configure-llvm-and-clang&quot;&gt;Configure LLVM and Clang&lt;/h2&gt; &lt;p&gt;It must be noted that the LLVM project no longer supports building with configure &amp;amp; make. We have to use CMake-based build system.&lt;/p&gt; &lt;p&gt;It is recommended to create a new build directory somewhere outside the source directory. To do this,&lt;/p&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$cd&lt;/span&gt; ../.. &lt;span class=&quot;nv&quot;&gt;$mkdir&lt;/span&gt; build &lt;span class=&quot;nv&quot;&gt;$cd&lt;/span&gt; build &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;In the build directory, run the following command:&lt;/p&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$cmake&lt;/span&gt; -G &lt;span class=&quot;s2&quot;&gt;&quot;Ninja&quot;&lt;/span&gt; -DCMAKE_INSTALL_PREFIX&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/install/path -DLLVM_TARGETS_TO_BUILD&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;AArch64 /pathto/llvm/ &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;The general syntax of cmake is &lt;code class=&quot;highlighter-rouge&quot;&gt;cmake -G &amp;lt;generator&amp;gt; [options] &amp;lt;path to llvm sources&amp;gt;&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;I prefer to use Ninja build system. Some common generators are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Unix Makefiles&lt;/code&gt; — for generating make-compatible parallel makefiles.&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Ninja&lt;/code&gt; — for generating Ninja build files. Most llvm developers use Ninja.&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Visual Studio&lt;/code&gt; — for generating Visual Studio projects and solutions.&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Xcode&lt;/code&gt; — for generating Xcode projects.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Variables are passed to cmake on the command line using the format &lt;code class=&quot;highlighter-rouge&quot;&gt;-D&amp;lt;variable name&amp;gt;=&amp;lt;value&amp;gt;&lt;/code&gt;. The following are the variables that I pass:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;LLVM_TARGETS_TO_BUILD &lt;br /&gt; This controls which targets is built and linked into llc.&lt;/p&gt; &lt;p&gt;The various values that this semicolon delimited list can include are &lt;code class=&quot;highlighter-rouge&quot;&gt;AArch64, AMDGPU, ARM, BPF, Hexagon, Mips, MSP430, NVPTX, PowerPC, Sparc, SystemZ, X86, XCore&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Here, in the example, I choose to use &lt;code class=&quot;highlighter-rouge&quot;&gt;AArch64&lt;/code&gt; as my target. You can set &lt;code class=&quot;highlighter-rouge&quot;&gt;LLVM_TARGETS_TO_BUILD=host&lt;/code&gt; instead. The list is set to LLVM_ALL_TARGETS as default. Doing this however, increases the build time considerably.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;CMAKE_INSTALL_PREFIX &lt;br /&gt; This specifies the directory where you want the LLVM tools and libraries to be installed (default /usr/local). DO NOT use relative paths for this.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;using-ninja-to-build-llvm-and-clang&quot;&gt;Using Ninja to build LLVM and Clang&lt;/h2&gt; &lt;p&gt;Running &lt;code class=&quot;highlighter-rouge&quot;&gt;cmake&lt;/code&gt; would have generated a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;build.ninja&lt;/code&gt;. At this stage, to build LLVM, just invoke &lt;code class=&quot;highlighter-rouge&quot;&gt;ninja&lt;/code&gt;. You might want to download Ninja binaries for your system from &lt;a href=&quot;https://github.com/ninja-build/ninja/releases&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ninja&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;Depending upon the configuration, this step might take considerable amount of time and system resource.&lt;/p&gt; &lt;center&gt; &lt;a href=&quot;/assets/llvm/sysres.png&quot;&gt;&lt;img src=&quot;/assets/llvm/sysres.png&quot; width=&quot;100%&quot; title=&quot;The build process is very CPU intensive!&quot; /&gt;&lt;/a&gt; &lt;/center&gt; &lt;p&gt;&lt;br /&gt;&lt;/p&gt; &lt;h2 id=&quot;install-llvm&quot;&gt;Install LLVM&lt;/h2&gt; &lt;p&gt;To install LLVM,&lt;/p&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ninja&lt;/span&gt; install &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;This installs LLVM binaries and libraries in the directory specified by the &lt;code class=&quot;highlighter-rouge&quot;&gt;CMAKE_INSTALL_PREFIX&lt;/code&gt; variable.&lt;/p&gt; &lt;p&gt;If you choose to do so, the final step would be to include the path to llvm binary files in &lt;code class=&quot;highlighter-rouge&quot;&gt;$PATH&lt;/code&gt; environment variable.&lt;/p&gt; &lt;center&gt; &lt;a href=&quot;/assets/llvm/finalres.png&quot;&gt;&lt;img src=&quot;/assets/llvm/finalres.png&quot; /&gt;&lt;/a&gt; &lt;/center&gt; &lt;p&gt;&lt;br /&gt;&lt;/p&gt; &lt;h2 id=&quot;updating-source&quot;&gt;Updating Source&lt;/h2&gt; &lt;p&gt;To update all components of LLVM infrastructure,&lt;/p&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$cd&lt;/span&gt; where-llvm-lives &lt;span class=&quot;nv&quot;&gt;$svn&lt;/span&gt; update . ./tools/clang/ ./projects/compiler-rt/ ./projects/openmp/ ./projects/libcxx ./projects/libcxxabi/ ./projects/test-suite/ &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;After this, build the project again using the aforementioned procedure.&lt;/p&gt; &lt;center&gt; &lt;a href=&quot;https://ninja-build.org/&quot; target=&quot;blank&quot;&gt;&lt;img src=&quot;/assets/llvm/ninja.png&quot; width=&quot;50px&quot; /&gt;&lt;/a&gt; &lt;/center&gt; &lt;p&gt;&lt;br /&gt;&lt;/p&gt; </description> <pubDate>Tue, 14 Jun 2016 05:30:00 +0530</pubDate> <link>http://arpith.xyz/2016/06/installing-llvm-from-source-ubuntu-16-04/</link> <guid isPermaLink="true">http://arpith.xyz/2016/06/installing-llvm-from-source-ubuntu-16-04/</guid> <category>iisc</category> <category>llvm</category> <category>misc</category> </item> <item> <title>Results for GCC 6.1 testsuite on x86_64-pc-linux-gnu</title> <description>&lt;h3 id=&quot;uname--a&quot;&gt;uname -a&lt;/h3&gt; &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Linux Arpith-XPS 4.6.0-040600-generic #201605151930 SMP Sun May 15 23:32:59 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux&lt;/code&gt;&lt;/p&gt; &lt;h3 id=&quot;lsbrelease--a&quot;&gt;lsb_release -a&lt;/h3&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;No LSB modules are available. Distributor ID: Ubuntu Description: Ubuntu 16.04 LTS Release: 16.04 Codename: xenial &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;h3 id=&quot;gcc-tests&quot;&gt;gcc tests&lt;/h3&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;/assets/misc/gcc6/gcc.sum.txt&quot;&gt;gcc.sum&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;/assets/misc/gcc6/gcc.log.txt.tar.xz&quot;&gt;gcc.log&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;=== gcc Summary === # of expected passes 116981 # of unexpected failures 20 # of expected failures 312 # of unsupported tests 1721 &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;h3 id=&quot;g-tests&quot;&gt;g++ tests&lt;/h3&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;/assets/misc/gcc6/g++.sum.txt&quot;&gt;g++.sum&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;/assets/misc/gcc6/g++.log.txt.tar.xz&quot;&gt;g++.log&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;=== g++ Summary === # of expected passes 104730 # of unexpected failures 24 # of unexpected successes 2 # of expected failures 315 # of unsupported tests 3698 &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;h3 id=&quot;gfortran-tests&quot;&gt;gfortran tests&lt;/h3&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;/assets/misc/gcc6/gfortran.sum.txt&quot;&gt;gfortran.sum&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;/assets/misc/gcc6/gfortran.log.txt.tar.xz&quot;&gt;gfortran.log&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;=== gfortran Summary === # of expected passes 42052 # of expected failures 62 # of unsupported tests 63 &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;h3 id=&quot;objc-tests&quot;&gt;objc tests&lt;/h3&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;/assets/misc/gcc6/objc.sum.txt&quot;&gt;objc.sum&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;/assets/misc/gcc6/objc.log.txt&quot;&gt;objc.log&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;=== objc Summary === # of expected passes 2783 # of expected failures 6 # of unsupported tests 68 &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; </description> <pubDate>Fri, 27 May 2016 05:30:00 +0530</pubDate> <link>http://arpith.xyz/2016/05/gcc-testsuite-results-6-1/</link> <guid isPermaLink="true">http://arpith.xyz/2016/05/gcc-testsuite-results-6-1/</guid> <category>iisc</category> <category>gcc</category> <category>misc</category> </item> <item> <title>Introduction to insertOnEdge in Soot</title> <description>&lt;h2&gt;Table Of Contents&lt;/h2&gt; &lt;ul id=&quot;markdown-toc&quot;&gt; &lt;li&gt;&lt;a href=&quot;#summary&quot; id=&quot;markdown-toc-summary&quot;&gt;Summary&lt;/a&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;#specified-by&quot; id=&quot;markdown-toc-specified-by&quot;&gt;Specified by&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#parameters&quot; id=&quot;markdown-toc-parameters&quot;&gt;Parameters&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#introduction&quot; id=&quot;markdown-toc-introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#usage&quot; id=&quot;markdown-toc-usage&quot;&gt;Usage&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#code&quot; id=&quot;markdown-toc-code&quot;&gt;Code&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#future-work&quot; id=&quot;markdown-toc-future-work&quot;&gt;Future Work&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;hr /&gt; &lt;p&gt;&lt;br /&gt;&lt;/p&gt; &lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt; &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;insertOnEdge&lt;/code&gt; adds instrumentation(s) to the Chain in a manner such that the resulting &lt;a href=&quot;https://en.wikipedia.org/wiki/Control_flow_graph&quot;&gt;CFG&lt;/a&gt; of the program will contain &lt;code class=&quot;highlighter-rouge&quot;&gt;toInsert&lt;/code&gt; on an edge that is defined by &lt;code class=&quot;highlighter-rouge&quot;&gt;point_source&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;point_target&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;This API available in Soot’s &lt;br /&gt; &lt;a href=&quot;https://ssebuild.cased.de/nightly/soot/javadoc/index.html?soot/PatchingChain.html&quot; target=&quot;_blank&quot;&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt; Class patchingChain &amp;lt;E extends Unit&amp;gt; &lt;/code&gt; &lt;/a&gt;&lt;/p&gt; &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;insertOnEdge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toInsert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point_src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point_tgt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;insertOnEdge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toInsert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point_src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point_tgt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;insertOnEdge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Chain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toInsert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point_src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point_tgt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;h3 id=&quot;specified-by&quot;&gt;Specified by&lt;/h3&gt; &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;insertOnEdge&lt;/code&gt; in interface &lt;code class=&quot;highlighter-rouge&quot;&gt;Chain&amp;lt;E extends Unit&amp;gt;&lt;/code&gt;&lt;/p&gt; &lt;h3 id=&quot;parameters&quot;&gt;Parameters&lt;/h3&gt; &lt;ul&gt; &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;toInsert &lt;/code&gt; - the instrumentation to be added in the Chain&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;point_src&lt;/code&gt; - the source point of an edge in CFG&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;point_tgt&lt;/code&gt; - the target point of an edge in CFG&lt;/li&gt; &lt;/ul&gt; &lt;hr /&gt; &lt;p&gt;&lt;br /&gt;&lt;/p&gt; &lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt; &lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;insertOnEdge&lt;/code&gt; API correctly adds instructions (&lt;code class=&quot;highlighter-rouge&quot;&gt;toInsert&lt;/code&gt;) to the target program (&lt;code class=&quot;highlighter-rouge&quot;&gt;Body&lt;/code&gt;) on an edge. In a Control Flow Graph, such a directed edge would be represented by a source point (&lt;code class=&quot;highlighter-rouge&quot;&gt;point_src&lt;/code&gt;) and a target unit (&lt;code class=&quot;highlighter-rouge&quot;&gt;point_tgt&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;Without this API, instrumenting certain edges can prove difficult and time consuming to the user.&lt;/p&gt; &lt;p&gt;Consider the following if condition:&lt;/p&gt; &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//unit1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//unit2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//unit3&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;The control flow graph for the above code is as follows: &lt;br /&gt; &lt;a href=&quot;/assets/soot/cfg.jpg&quot;&gt;&lt;img src=&quot;/assets/soot/cfg.jpg&quot; alt=&quot;CFG&quot; /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Assume that the user wishes to instrument all three edges with a statement &lt;code class=&quot;highlighter-rouge&quot;&gt;toInsert&lt;/code&gt;.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Edge 1: Can be instrumented using &lt;code class=&quot;highlighter-rouge&quot;&gt;body.getUnits().insertAfter(toInsert, Unit1)&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Edge 2: Can be instrumented using &lt;code class=&quot;highlighter-rouge&quot;&gt;body.getUnits().insertBeforeNoRedirect(toInsert, Unit3)&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Edge 3: ????&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;None of the APIs previously available enables a user to easily instrument &lt;em&gt;only&lt;/em&gt; the false branch (Edge 3). Neither &lt;code class=&quot;highlighter-rouge&quot;&gt;insertBefore unit3&lt;/code&gt; nor &lt;code class=&quot;highlighter-rouge&quot;&gt;insertAfter unit1&lt;/code&gt; will work. Using &lt;code class=&quot;highlighter-rouge&quot;&gt;insertBefore unit3&lt;/code&gt; will cause the instrumentation to be executed no matter which branch the program takes.&lt;/p&gt; &lt;p&gt;This is where insertOnEdge comes in. The 3rd edge can be instrumented by simply using &lt;a href=&quot;/assets/soot/easy.jpg&quot; target=&quot;_blank&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;body.getUnits().insertOnEdge(toInsert, Unit1, Unit3);&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;In fact, insertOnEdge can be used on all three edges. This further reduces the user’s work.&lt;/p&gt; &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUnits&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;insertOnEdge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toInsert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Unit1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Unit2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUnits&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;insertOnEdge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toInsert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Unit2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Unit3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUnits&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;insertOnEdge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toInsert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Unit1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Unit3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;hr /&gt; &lt;p&gt;&lt;br /&gt;&lt;/p&gt; &lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;insertOnEdge(toInsert, null, target)&lt;/code&gt; &lt;br /&gt; Doing this is same as performing &lt;code class=&quot;highlighter-rouge&quot;&gt;insertBefore(toInsert, target)&lt;/code&gt;. All jumps to &lt;code class=&quot;highlighter-rouge&quot;&gt;target&lt;/code&gt; is redirected to &lt;code class=&quot;highlighter-rouge&quot;&gt;toInsert&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;insertOnEdge(toInsert, source, null)&lt;/code&gt; &lt;br /&gt; Doing this is same as performing &lt;code class=&quot;highlighter-rouge&quot;&gt;insertAfter(toInsert, source)&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;insertOnEdge(toInsert, source, target)&lt;/code&gt; &lt;br /&gt; This adds an instrumentation in a manner such that the resulting CFG of the program will contain &lt;code class=&quot;highlighter-rouge&quot;&gt;toInsert&lt;/code&gt; on an edge that is defined by &lt;code class=&quot;highlighter-rouge&quot;&gt;source&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;target&lt;/code&gt;. &lt;br /&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;insertOnEdge&lt;/code&gt; will throw RuntimeException if such an edge does not exist in the program’s CFG.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;insertOnEdge(toInsert, null, null)&lt;/code&gt; &lt;br /&gt; Just don’t do this. &lt;code class=&quot;highlighter-rouge&quot;&gt;insertOnEdge&lt;/code&gt; will throw a RuntimeException&lt;a href=&quot;/assets/soot/ohshi.jpg&quot; target=&quot;_blank&quot;&gt;.&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;hr /&gt; &lt;p&gt;&lt;br /&gt;&lt;/p&gt; &lt;h2 id=&quot;code&quot;&gt;Code&lt;/h2&gt; &lt;p&gt;You could read the following code to go into the nitty-gritties of insertOnEdge. &lt;a href=&quot;https://gist.github.com/arpith20/d4ccb3476e71a2e2bedd1258c6a5c3f6#file-insertonedge-java&quot;&gt;&lt;em&gt;(View code on GitHub)&lt;/em&gt;&lt;/a&gt;:&lt;/p&gt; &lt;noscript&gt;&lt;pre&gt;/** * Inserts instrumentation in a manner such that the resulting control flow * graph (CFG) of the program will contain &amp;lt;code&amp;gt;toInsert&amp;lt;/code&amp;gt; on an edge * that is defined by &amp;lt;code&amp;gt;point_source&amp;lt;/code&amp;gt; and &amp;lt;code&amp;gt;point_target&amp;lt;/code&amp;gt;. * * @param toInsert the instrumentation to be added in the Chain * @param point_src the source point of an edge in CFG * @param point_tgt the target point of an edge */ public void insertOnEdge(E toInsert, E point_src, E point_tgt) { if (toInsert == null) throw new RuntimeException(&amp;quot;Bad idea! You tried to insert &amp;quot; + &amp;quot;a null object into a Chain!&amp;quot;); if (map.containsKey(toInsert)) throw new RuntimeException(&amp;quot;Chain already contains object.&amp;quot;); // Insert &amp;#39;toInsert&amp;#39; before &amp;#39;target&amp;#39; point in chain if the source point is null if (point_src == null &amp;amp;&amp;amp; point_tgt != null) { ((Unit) point_tgt).redirectJumpsToThisTo((Unit) toInsert); insertBefore(toInsert, point_tgt); return; } // Insert &amp;#39;toInsert&amp;#39; after &amp;#39;source&amp;#39; point in chain if the target point is null if (point_src != null &amp;amp;&amp;amp; point_tgt == null) { insertAfter(toInsert, point_src); return; } // Throw an exception if both source and target is null if (point_src == null &amp;amp;&amp;amp; point_tgt == null) { throw new RuntimeException(&amp;quot;insertOnEdge failed! Both source and target points are null&amp;quot;); } // If target is right after the source in the Chain // 1- Redirect all jumps (if any) from &amp;#39;source&amp;#39; to &amp;#39;target&amp;#39;, to &amp;#39;toInsert&amp;#39; // (source-&amp;gt;target) ==&amp;gt; (source-&amp;gt;toInsert) // 2- Insert &amp;#39;toInsert&amp;#39; after &amp;#39;source&amp;#39; in Chain if (getSuccOf(point_src) == point_tgt) { List&amp;lt;UnitBox&amp;gt; boxes = ((Unit) point_src).getUnitBoxes(); for (UnitBox box : boxes) { if (box.getUnit() == point_tgt) { box.setUnit((Unit) toInsert); } } insertAfter(toInsert, point_src); return; } // If the target is not right after the source in chain then, // 1- Redirect all jumps (if any) from &amp;#39;source&amp;#39; to &amp;#39;target&amp;#39;, to &amp;#39;toInsert&amp;#39; // (source-&amp;gt;target) ==&amp;gt; (source-&amp;gt;toInsert) // 1.1- if there are no jumps from source to target, then such an edge does not exist. Throw an exception. // 2- Insert &amp;#39;toInsert&amp;#39; before &amp;#39;target&amp;#39; in Chain // 3- If required, add a &amp;#39;goto target&amp;#39; statement so that no other edge executes &amp;#39;toInsert&amp;#39; boolean validEdgeFound = false; E originalPred = getPredOf(point_tgt); List&amp;lt;UnitBox&amp;gt; boxes = ((Unit) point_src).getUnitBoxes(); for (UnitBox box : boxes) { if (box.getUnit() == point_tgt) { if (point_src instanceof GotoStmt) { box.setUnit((Unit) toInsert); insertAfter(toInsert, point_src); E goto_unit = (E) new JGotoStmt((Unit) point_tgt); insertAfter(goto_unit, toInsert); return; } box.setUnit((Unit) toInsert); validEdgeFound = true; } } if (validEdgeFound) { insertBefore(toInsert, point_tgt); if (originalPred != point_src) { if (originalPred instanceof GotoStmt) return; E goto_unit = (E) new JGotoStmt((Unit) point_tgt); insertBefore(goto_unit, (E) toInsert); } return; } // In certain scenarios, the above code can add extra &amp;#39;goto&amp;#39; units on a different edge // So, an edge [src --&amp;gt; tgt] becomes [src -&amp;gt; goto tgt -&amp;gt; tgt]. // When this happens, the original edge [src -&amp;gt; tgt] ceases to exist. // The following code handles such scenarios. if (getSuccOf(point_src) instanceof GotoStmt) { if (((Unit) getSuccOf(point_src)).getUnitBoxes().get(0).getUnit() == point_tgt) { ((Unit) getSuccOf(point_src)).redirectJumpsToThisTo((Unit) toInsert); insertBefore(toInsert, getSuccOf(point_src)); return; } } // If the control reaches this point, it means that an edge [stc -&amp;gt; tgt] as specified by user does not exist and is thus invalid // Return an exception. throw new RuntimeException( &amp;quot;insertOnEdge failed! No such edge found. The edge on which you want to insert an instrumentation is invalid.&amp;quot;); }&lt;/pre&gt;&lt;/noscript&gt; &lt;script src=&quot;https://gist.github.com/arpith20/d4ccb3476e71a2e2bedd1258c6a5c3f6.js&quot;&gt; &lt;/script&gt; &lt;hr /&gt; &lt;p&gt;&lt;br /&gt;&lt;/p&gt; &lt;h2 id=&quot;future-work&quot;&gt;Future Work&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;At the time of writing, this work is tested and known to work on Jimple code. Shimple intermediate representation is not supported.&lt;/li&gt; &lt;li&gt;Exception edges cannot be instrumented using this method.&lt;/li&gt; &lt;/ul&gt; &lt;hr /&gt; &lt;p&gt;&lt;br /&gt; PS: The insertOnEdge feature was added to the Soot repository with this pull request: &lt;a href=&quot;https://github.com/Sable/soot/pull/583&quot; target=&quot;_blank&quot;&gt;Feature/insert on edge #583&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Have any suggestions or questions that you want answered? Feel free to contact me or use the comment section below.&lt;/p&gt; </description> <pubDate>Sat, 07 May 2016 09:42:22 +0530</pubDate> <link>http://arpith.xyz/2016/05/insertonedge-soot/</link> <guid isPermaLink="true">http://arpith.xyz/2016/05/insertonedge-soot/</guid> <category>iisc</category> <category>soot</category> <category>blog</category> </item> <item> <title>The World of Exponentials</title> <description>&lt;p&gt;&lt;img width=&quot;150px&quot; height=&quot;180px&quot; src=&quot;http://arpith.xyz/images/ExponentialGrowth.jpg&quot; align=&quot;left&quot; /&gt; To learn the mathematical power of exponents and exponential curves, school children in France were asked to imagine a pond with a small water lily leaf growing on it. The leaf, they were told, would double in size every day and would take thirty days to cover the entire pond. If the lily did cover the pond, it would smother and kill all other forms of life in the water. The question then posted to the children was, on what day will the lily cover half the pond?&lt;/p&gt; &lt;p&gt;At first, there wasn’t much to worry about. The lily grew at a rate that was barely noticeable, reaching only one-tenth of 1 percent of the pond covered by day 20. Just 0.1 percent. Five days later, it had reached 3 percent, but, still relatively uncovered, the children let the lily continue to grow. Until suddenly, at day 29, the lily covered half the pond. By then, there was precious little time to save the pond, which was strangled by the lily the very next day.&lt;/p&gt; &lt;p&gt;The twenty-ninth day can ofter seem like any other day, but given the nature of exponentials, the pond is already half-chocked to death.&lt;/p&gt; &lt;p&gt;The lessons of the pond are that the magical nature of exponential growth can sneak up on us very, very quickly and that our continued linear thinking can come at out own peril.&lt;/p&gt; &lt;p&gt;&lt;em&gt;–Chapter 3: Moore’s Outlaws; &lt;a href=&quot;http://www.goodreads.com/book/show/22318398-future-crimes&quot; target=&quot;_blank&quot;&gt;Future Crimes&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; </description> <pubDate>Fri, 06 May 2016 05:30:00 +0530</pubDate> <link>http://arpith.xyz/2016/05/the-world-of-exponentials/</link> <guid isPermaLink="true">http://arpith.xyz/2016/05/the-world-of-exponentials/</guid> <category>inspiration</category> </item> <item> <title>Life Explained in 27 Seconds</title> <description>&lt;center&gt; &lt;div class=&quot;embed twitter&quot;&gt;&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Life is like going the wrong way on a moving walkway. Stand still and you go backwards. Walk and you stay put. Gotta hustle to get ahead. P&lt;/p&gt;&amp;mdash; Farrelly Brothers (@farrellybros) &lt;a href=&quot;https://twitter.com/farrellybros/status/407787314597728256&quot;&gt;December 3, 2013&lt;/a&gt;&lt;/blockquote&gt; &lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/div&gt; &lt;/center&gt; &lt;p&gt;&lt;br /&gt;&lt;/p&gt; &lt;iframe src=&quot;https://www.youtube.com/embed/L9VBpbnXhWk&quot; width=&quot;100%&quot; height=&quot;480&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;allowfullscreen&quot;&gt;&lt;/iframe&gt; &lt;p&gt;&lt;br /&gt; &lt;br /&gt; &lt;br /&gt;&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;Live as if it were impossible to fail&lt;/p&gt; &lt;p&gt;– &lt;cite&gt;Casey Neistat&lt;/cite&gt;&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;&lt;br /&gt; &lt;br /&gt; &lt;br /&gt;&lt;/p&gt; </description> <pubDate>Wed, 03 Feb 2016 05:30:00 +0530</pubDate> <link>http://arpith.xyz/2016/02/life-in-27-seconds/</link> <guid isPermaLink="true">http://arpith.xyz/2016/02/life-in-27-seconds/</guid> <category>inspiration</category> </item> <item> <title>Getting Started with PintOS</title> <description>&lt;p&gt;This guide walks you through a series of steps to get you started working on &lt;a href=&quot;https://web.stanford.edu/class/cs140/projects/pintos/pintos_1.html&quot; target=&quot;_blank&quot;&gt;PintOS&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Pintos is a simple operating system framework that supports very basic features. The objective is to strengthen the functionality of this OS. This involves working on various aspects of an operating system including:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;https://web.stanford.edu/class/cs140/projects/pintos/pintos_2.html#SEC15&quot; target=&quot;_blank&quot;&gt;Threads&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://web.stanford.edu/class/cs140/projects/pintos/pintos_3.html#SEC32&quot; target=&quot;_blank&quot;&gt;User Programs&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://web.stanford.edu/class/cs140/projects/pintos/pintos_4.html#SEC53&quot; target=&quot;_blank&quot;&gt;Virtual Memory&lt;/a&gt; and&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://web.stanford.edu/class/cs140/projects/pintos/pintos_5.html#SEC75&quot; target=&quot;_blank&quot;&gt;File Systems&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt; Table Of Contents&lt;/h2&gt; &lt;ul id=&quot;markdown-toc&quot;&gt; &lt;li&gt;&lt;a href=&quot;#installing-pintos&quot; id=&quot;markdown-toc-installing-pintos&quot;&gt;Installing PintOS&lt;/a&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;#prerequisites&quot; id=&quot;markdown-toc-prerequisites&quot;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#obtaining-the-source-code&quot; id=&quot;markdown-toc-obtaining-the-source-code&quot;&gt;Obtaining the Source Code&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#setting-the-path-variables&quot; id=&quot;markdown-toc-setting-the-path-variables&quot;&gt;Setting the PATH Variables&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#compiling-the-source&quot; id=&quot;markdown-toc-compiling-the-source&quot;&gt;Compiling the Source&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#testing&quot; id=&quot;markdown-toc-testing&quot;&gt;Testing&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#using-eclipse&quot; id=&quot;markdown-toc-using-eclipse&quot;&gt;Using Eclipse&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;installing-pintos&quot;&gt;Installing PintOS&lt;/h2&gt; &lt;h3 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h3&gt; &lt;p&gt;Before starting, you’ll need to install the following dependencies&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Linux OS (At the time of writing, I was using Ubuntu 15.10)&lt;/li&gt; &lt;li&gt;qemu (Emulator)&lt;/li&gt; &lt;li&gt;GNU make&lt;/li&gt; &lt;li&gt;GNU binutils&lt;/li&gt; &lt;li&gt;perl&lt;/li&gt; &lt;li&gt;gdb&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt-get install qemu make binutils perl gdb&lt;/code&gt;&lt;/p&gt; &lt;h3 id=&quot;obtaining-the-source-code&quot;&gt;Obtaining the Source Code&lt;/h3&gt; &lt;p&gt;Head over to the Stanford’s &lt;a href=&quot;https://web.stanford.edu/class/cs140/projects/pintos/pintos_1.html&quot; target=&quot;_blank&quot;&gt;site&lt;/a&gt; or click the link below to download the tar.gz file containing the PintOS source: &lt;br /&gt; &lt;a href=&quot;http://www.stanford.edu/class/cs140/projects/pintos/pintos.tar.gz&quot;&gt;http://www.stanford.edu/class/cs140/projects/pintos/pintos.tar.gz&lt;/a&gt; (&lt;a href=&quot;/assets/pintos/pintos.tar.gz&quot;&gt;mirror&lt;/a&gt;)&lt;/p&gt; &lt;p&gt;Extract the contents to the directory of your choice. For the purpose of this post, I will assume that the contents were extracted to the &lt;code class=&quot;highlighter-rouge&quot;&gt;$HOME&lt;/code&gt; directory.&lt;/p&gt; &lt;h3 id=&quot;setting-the-path-variables&quot;&gt;Setting the PATH Variables&lt;/h3&gt; &lt;p&gt;The project requires you to run scripts present in &lt;code class=&quot;highlighter-rouge&quot;&gt;/src/utils&lt;/code&gt; folder. Working on this project would be easier if you have this directory your in &lt;code class=&quot;highlighter-rouge&quot;&gt;$PATH&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The easiest way to add &lt;code class=&quot;highlighter-rouge&quot;&gt;/src/utils&lt;/code&gt; is as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Open terminal&lt;/li&gt; &lt;li&gt;Add the line PATH=”$PATH:$HOME/pintos/src/utils” to .profile or .bashrc&lt;br /&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;$ echo PATH=&quot;$PATH:$HOME/pintos/src/utils&quot; &amp;gt;&amp;gt; ~/.bashrc&lt;/code&gt;&lt;/li&gt; &lt;li&gt;Reload your shell&lt;br /&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;$ source ~/.bashrc&lt;/code&gt;&lt;/li&gt; &lt;li&gt;To verify that the environment has been set correctly, run the following command &lt;br /&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;$ pintos&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a href=&quot;/assets/pintos/pintos1.png&quot;&gt;&lt;img src=&quot;/assets/pintos/pintos1.png&quot; alt=&quot;PintOS available options&quot; /&gt;&lt;/a&gt; &lt;br /&gt;&lt;br /&gt;If you get the above output, congratulations! You just took your first baby step! :)&lt;/p&gt; &lt;h2 id=&quot;compiling-the-source&quot;&gt;Compiling the Source&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;Head over to src/threads directory &lt;br /&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;$ cd pintos/src/threads&lt;/code&gt;&lt;/li&gt; &lt;li&gt;Set the simulator to &lt;code class=&quot;highlighter-rouge&quot;&gt;qemu&lt;/code&gt; in Make.vars file &lt;br /&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;SIMULATOR = --qemu&lt;/code&gt;&lt;/li&gt; &lt;li&gt;Compile the source with the make command &lt;br /&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;$ make&lt;/code&gt;&lt;/li&gt; &lt;li&gt;Run a program called ‘alarm-single’ in PintOS with QEMU &lt;br /&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;$ pintos --qemu -- -q run alarm-single&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h3 class=&quot;error&quot;&gt;Troubleshooting&lt;/h3&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;At this point you might get an error which says: &lt;br /&gt; Can’t exec “qemu”: No such file or directory at /home/arpith/pintos/src/utils/pintos line 923.&lt;br /&gt; &lt;br /&gt; In this case, open the &lt;code&gt;pintos&lt;/code&gt; perl script in &lt;code&gt;src/utils/&lt;/code&gt; and replace line 623 (&lt;code&gt;my (@cmd) = ('qemu');&lt;/code&gt;) with &lt;code&gt;my (@cmd) = ('qemu-system-i386');&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Ideally, the QEMU should exit once PintOS powers off.&lt;br /&gt; I it does not and gets stuck at &lt;code class=&quot;highlighter-rouge&quot;&gt;Powering off...&lt;/code&gt;, then it means that there is something wrong with ACPI poweroff routine.&lt;br /&gt; To rectify the issue, open the file &lt;code&gt;src/devices/shutdown.c&lt;/code&gt;&lt;br /&gt; Now, Insert the line &lt;code&gt;outw( 0x604, 0x0 | 0x2000 );&lt;/code&gt; after &lt;code&gt;printf (&quot;Powering off...\n&quot;); serial_flush ();&lt;/code&gt; as shown below:&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Powering off...&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serial_flush&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//add the following line &lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x604&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x2000&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* This is a special power-off sequence supported by Bochs and QEMU, but not by physical hardware. */&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'\0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outb&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x8900&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;After you make the above changes, recompile with the &lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt; command and rerun alarm-single program in PintOS.&lt;br /&gt;&lt;br /&gt; &lt;a href=&quot;/assets/pintos/pintos2.png&quot;&gt;&lt;img src=&quot;/assets/pintos/pintos2.png&quot; alt=&quot;PintOS available options&quot; /&gt;&lt;/a&gt; &lt;br /&gt;&lt;br /&gt;Congratulations! You should now have a program running in PintOS!&lt;/p&gt; &lt;h2 id=&quot;testing&quot;&gt;Testing&lt;/h2&gt; &lt;p&gt;The source comes with predefined test cases which you would use through the course of this project to verify your implementation.&lt;/p&gt; &lt;p&gt;After building the project, you’ll see that a new directory called &lt;code class=&quot;highlighter-rouge&quot;&gt;build&lt;/code&gt; is created. Go to that directory and execute &lt;br /&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;$ make check&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Assuming that this is the first time you’re running PintOS and have not modified the original source code, most of the test cases would fail. For the first project, you’d have to implement alarm clock, priority scheduling and advanced scheduler. Once you have correctly implemented this, all test cases should pass.&lt;/p&gt; &lt;p&gt;Good Luck!&lt;/p&gt; &lt;h2 id=&quot;using-eclipse&quot;&gt;Using Eclipse&lt;/h2&gt; &lt;p&gt;While one could use Vim to edit your code and use ctags + cscope to navigate between them, I find working with Eclipse much easier.&lt;/p&gt; &lt;p&gt;To import the source code,&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;http://www.eclipse.org/downloads/&quot; target=&quot;_blank&quot;&gt;Download Eclipse&lt;/a&gt; for C/C++&lt;/li&gt; &lt;li&gt;goto &lt;code class=&quot;highlighter-rouge&quot;&gt;file -&amp;gt; import -&amp;gt; C/C++&lt;/code&gt;&lt;/li&gt; &lt;li&gt;Select Existing Code as MakeFile Project&lt;/li&gt; &lt;li&gt;Click next&lt;/li&gt; &lt;li&gt;Name your project &lt;code class=&quot;highlighter-rouge&quot;&gt;batman&lt;/code&gt; :P&lt;/li&gt; &lt;li&gt;Set the src folder of PintOS as the Existing Code Location&lt;/li&gt; &lt;li&gt;Use Linux GCC as the toolchain from indexer settings&lt;/li&gt; &lt;li&gt;Done!&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You should now be able to see all directories in the Project Explorer.&lt;/p&gt; &lt;p&gt;Some of the most commonly used shortcuts are&lt;/p&gt; &lt;ul&gt; &lt;li&gt;F3 - To view the deceleration of the selected function&lt;/li&gt; &lt;li&gt;Ctrl + Shift + G - To find references to selected function. I used this to locate the function calls to a particular function&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;I used eclipse only as an editor. To build the project, the terminal was my friend.&lt;/p&gt; &lt;p&gt;Note: There are hundreds of ways to set up your working environment. One could use Vim while other prefers Gedit (o.O). What I did is just one of the many ways. Feel free to explore and learn.&lt;/p&gt; &lt;h2&gt; Epilogue &lt;/h2&gt; &lt;p&gt;Be sure to read the documentation provided by Stanford carefully.&lt;/p&gt; &lt;p&gt;Understand what you need to do and observe what the original source code already does. Spend some time designing the solution on a piece of paper before actually implementing it. This could potentially save a lot of time at a later stage.&lt;/p&gt; &lt;p&gt;All the best! See you on the other side :P&lt;/p&gt; </description> <pubDate>Wed, 20 Jan 2016 00:00:00 +0530</pubDate> <link>http://arpith.xyz/2016/01/getting-started-with-pintos/</link> <guid isPermaLink="true">http://arpith.xyz/2016/01/getting-started-with-pintos/</guid> <category>iisc</category> <category>os</category> <category>blog</category> </item> <item> <title>Research Interviews at IITM and IISc</title> <description>&lt;h2 id=&quot;table-of-contents&quot;&gt;Table Of Contents&lt;/h2&gt; &lt;ul id=&quot;markdown-toc&quot;&gt; &lt;li&gt;&lt;a href=&quot;#table-of-contents&quot; id=&quot;markdown-toc-table-of-contents&quot;&gt;Table Of Contents&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#interview-experience-for-ms-computer-science-course-in-iit-madras&quot; id=&quot;markdown-toc-interview-experience-for-ms-computer-science-course-in-iit-madras&quot;&gt;Interview experience for MS (Computer Science) course in IIT Madras&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#interview-experience-for-msc-engineering-in-computer-science-and-automation-in-iisc&quot; id=&quot;markdown-toc-interview-experience-for-msc-engineering-in-computer-science-and-automation-in-iisc&quot;&gt;Interview Experience for MSc Engineering in Computer Science and Automation in IISc&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;hr /&gt; &lt;p&gt;&lt;br /&gt;&lt;/p&gt; &lt;p&gt;It sometimes surprises me to see how things just fall into place. It was always my dream to work as a researcher, but never knew about the research courses offered by various institutes like IISc (MSc Engineering) or IIT Madras (MS) among others.&lt;/p&gt; &lt;p&gt;I didn’t perform satisfactorily in my GATE exam and secured a rank of 622. I screwed up my solutions for easiest of questions in aptitude section. Trust me, being in this position sucks, because even after solving the hardest of technical problems correctly, I thought that I had lost my chance of studying in premier &lt;em&gt;technical&lt;/em&gt; institutes!&lt;/p&gt; &lt;p&gt;Well, some might say that this score is excellent considering that over 1.25 lakh students write this exam in Computer Science branch alone (over 1 million, all branches combined, just in case you were curious), but the harsh reality is that being categorized as a ‘general student’ (as opposed to SC/ST) reduces the chance of securing a seat in top institutes in India. The only way I could get admitted to MTech course in these institutes would be if most of the 621 students who had performed better than me suffered from a mental disease and forfeit their seats :P. Well obviously, such a situation in the year of 2015 is highly improbable and so I began searching for alternatives which would either mean applying for a job or to accept defeat and take admission in less desired NITs or other (not so desired) private institutes.&lt;/p&gt; &lt;p&gt;Now, this was when I heard about the research programs offered by the ‘&lt;em&gt;desirable&lt;/em&gt;’ institutes that I was talking about. Looking at the cutoff scores of previous years, I still had a chance. But one hurdle remained (well, two). Most of the institutes that accept research students conduct another written round followed by an interview. I applied for MS course in IIT Madras and MSc (Engineering) in IISc Bangalore.&lt;/p&gt; &lt;h2 id=&quot;interview-experience-for-ms-computer-science-course-in-iit-madras&quot;&gt;Interview experience for MS (Computer Science) course in IIT Madras&lt;/h2&gt; &lt;p&gt;The written round was conducted on the 4&lt;sup&gt;th&lt;/sup&gt; day of May 2015 and everyone who had scored more than 600 in GATE were considered eligible for this exam.&lt;/p&gt; &lt;p&gt;It consisted of two rounds of one and half hours each. The first round (Part A) constituted of objective questions that tested your aptitude, technical, mathematical and lingual abilities (confined to English &lt;em&gt;phew&lt;/em&gt;). If I remember correctly, this round consisted of 25 questions pertaining to analytical ability (Basic Engineering Mathematics, Probability and Statistics, Ratio and proportion, Combinatorics, Technical Comprehension), C-Programming and Basic Discrete Mathematics (Logic, Sets, Relations, Functions).&lt;/p&gt; &lt;p&gt;Part B consisted of 20 subjective questions, the intention of which was to test the technical knowledge pertaining to a specific area in-depth. These ‘areas’ as they call it is classified as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Area-1: Data Structures, Algorithms and Programming.&lt;/li&gt; &lt;li&gt;Area-2: Digital Logic, Computer Organization and Operating Systems.&lt;/li&gt; &lt;li&gt;Area-3: Formal Language and Automata Theory, Advanced Discrete Mathematics, Artificial Intelligence.&lt;/li&gt; &lt;li&gt;Area-4: Data bases, Networking and Compilers.&lt;/li&gt; &lt;li&gt;Area-5: Signal and Systems, Continuous Mathematics and Probability and Random Processes.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The results of the written round was announced on the same day in the afternoon. Out of ~400 students who had attended this exam around 40 were selected.&lt;/p&gt; &lt;p&gt;The interview round was conducted for the selected candidates on 6&lt;sup&gt;th&lt;/sup&gt; May after verifying their documents. The panel consisted of around 10 professors. The students were being asked to choose their favorite subject. I chose Computer Architecture and Operating Systems. For me, their questions tested my in-depth understanding on the concepts of cache, pipelining and processes (OS). Most of the questions that I was asked were on cache. In my opinion everything that could have been asked regarding cache concept was asked. Few questions were direct and easy but most of them test the candidate’s ability to think on the spot once presented with a problem.&lt;/p&gt; &lt;p&gt;The final result was announced on 15&lt;sup&gt;th&lt;/sup&gt; May 2015. The results were announced in a public domain and &lt;a href=&quot;https://drive.google.com/file/d/0B61DWhik0jONUzhPZDhPdFBRS3M/view?usp=sharing&quot; target=&quot;_blank&quot; data-blogger-escaped-target=&quot;_blank&quot;&gt;here’s&lt;/a&gt; a mirror of the same.&lt;/p&gt; &lt;p&gt;As far as stay is concerned in Madras, you have multiple options. The best option is to get yourself a room booked in Taramani Guest house. Here, the rooms are air-conditioned and comfortable with clean attached bathrooms. I was charged Rs 800 for a room per night. However, it’s very difficult to get a booking here since the number of rooms is very sparse and most of you will have to look for other options.&lt;/p&gt; &lt;figure&gt; &lt;a href=&quot;/assets/interview/PANO_20150506_193732.jpg&quot;&gt; &lt;img src=&quot;/assets/interview/PANO_20150506_193732.jpg&quot; /&gt;&lt;/a&gt; &lt;figcaption align=&quot;right&quot;&gt;Taramani Guest House&lt;/figcaption&gt; &lt;/figure&gt; &lt;p&gt;The second alternative is to opt into the college hostel. If you are one of the pampered kind and comfort is your first priority, then this place will be complete nightmare. My friends who had stayed there were provided a room with a bed but without a mattress. Even though I did not stay here, from those who did, the reviews were mostly negative. They were charged Rs350 per night. You are however guaranteed a roof over your head in a safe environment in the proximity of place where you will be interviewed. For most students this should be sufficient.&lt;/p&gt; &lt;p&gt;The last option is to book a room in a hotel near IIT Madras. This will probably be the costliest of the three options but can potentially be the most comfortable in terms of stay. But note that IIT Madras is a very large campus and being close to IIT need not necessarily mean you are close to your department. You’ll have to make your own arrangements to reach the respective departments and transportation like auto rickshaws or yellow cabs in Chennai is not cheap. Also interacting with people outside IIT can be an issue for someone who doesn’t speak Tamil. Hardly anyone understand (or choose to understand) Hindi and they barely speak English. I would personally not choose this option and since I prefer the safety if IIT over fumbling around in an unknown city, but to each their own.&lt;/p&gt; &lt;h2 id=&quot;interview-experience-for-msc-engineering-in-computer-science-and-automation-in-iisc&quot;&gt;Interview Experience for MSc Engineering in Computer Science and Automation in IISc&lt;/h2&gt; &lt;p&gt;Similar to the case of IIT Madras, only students who clear a specified cutoff in GATE exam are allowed to write the first round of written exam. The cutoff for computer science students in the year of 2015 was 664 (for other departments &lt;a href=&quot;https://drive.google.com/file/d/0B61DWhik0jONTVh4bFdJcVFNeFU/view?usp=sharing&quot; target=&quot;_blank&quot;&gt;click here&lt;/a&gt;).&lt;/p&gt; &lt;p&gt;Unlike the case of IIT Madras, not all eligible students were interviewed on the same day. This was spread over a span of 5 days (2&lt;sup&gt;nd&lt;/sup&gt; to 6&lt;sup&gt;th&lt;/sup&gt; June). I was called for my interview on 5&lt;sup&gt;th&lt;/sup&gt; of June 2015 (at 9AM).&lt;/p&gt; &lt;p&gt;To qualify, you are expected to know your area of interest beforehand. They broadly classify this into three categories which are as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Theoretical Computer Science&lt;/li&gt; &lt;li&gt;Computer Systems and&lt;/li&gt; &lt;li&gt;Intelligent Systems&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You are given a form in which you are expected to fill in your details and specify the area of interest, sub area and background subject. Follow &lt;a href=&quot;https://drive.google.com/file/d/0B61DWhik0jONSUxNcWVuTTFIZG8/view?usp=sharing&quot; target=&quot;_blank&quot; data-blogger-escaped-target=&quot;_blank&quot;&gt;this link&lt;/a&gt; to view the form.&lt;/p&gt; &lt;p&gt;The table in page 2 will help you make this decision.&lt;/p&gt; &lt;p&gt;After filling this form, I was escorted to a lobby where around 32 students were to be seated to answer an objective question paper. All questions were technical pertaining to the subject of Engineering Mathematics, Computer Architecture, Operating Systems and C Programming among others. There were 15 questions that they expected us to solve in 40 minutes.&lt;/p&gt; &lt;p&gt;The results was announced within the next half hour. Unlike IIT Madras, almost everyone (80 percent) was interviewed by the faculty of respective subjects.&lt;/p&gt; &lt;p&gt;I chose computer architecture and operating system as my areas of interest (they both belong to computer systems category). Also, data structures and computer organization were my background subject.&lt;/p&gt; &lt;p&gt;My interview lasted for around 30-45 minutes. Most of the questions that I was asked were from data structures, algorithms and a few from computer organization.&lt;/p&gt; &lt;p&gt;Some of the problems were tricky and require on the spot thinking. The faculty is absolutely friendly and will go out of their way to put a student at ease and make oneself comfortable. They will repeatedly give you pointers whenever you stumble upon a problem. They also give enough room to correct yourself in case you answer a problem incorrectly in the first try.&lt;/p&gt; &lt;p&gt;The results were soon announced in their webpage. But a word of caution. At IISc, you are not guaranteed a seat even if your application number is listed in their site. Most of them are just waitlisted (I’ll try to break this news without sounding too harsh, in a college such as this, being wait-listed is same as not being selected, now comon!). You know you are selected when you officially receive a call letter from them via email. Much to the surprise everyone, very few candidates were selected for research programs (MSc and PhD) this year.&lt;/p&gt; &lt;p&gt;Here are some statistics for the ones who are interested:&lt;/p&gt; &lt;table data-blogger-escaped-style=&quot;border-collapse: collapse; border: none; mso-border-alt: solid windowtext .5pt; mso-padding-alt: 0in 5.4pt 0in 5.4pt; mso-yfti-tbllook: 1184;&quot;&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td width=&quot;208&quot; data-blogger-escaped-style=&quot;border: solid windowtext 1.0pt; mso-border-alt: solid windowtext .5pt; padding: 0in 5.4pt 0in 5.4pt; width: 155.8pt;&quot;&gt;&lt;strong&gt;Course&lt;/strong&gt;&lt;/td&gt; &lt;td width=&quot;208&quot; data-blogger-escaped-style=&quot;border-left: none; border: solid windowtext 1.0pt; mso-border-alt: solid windowtext .5pt; mso-border-left-alt: solid windowtext .5pt; padding: 0in 5.4pt 0in 5.4pt; width: 155.85pt;&quot;&gt;&lt;strong&gt;Branch&lt;/strong&gt;&lt;/td&gt; &lt;td width=&quot;208&quot; data-blogger-escaped-style=&quot;border-left: none; border: solid windowtext 1.0pt; mso-border-alt: solid windowtext .5pt; mso-border-left-alt: solid windowtext .5pt; padding: 0in 5.4pt 0in 5.4pt; width: 155.85pt;&quot;&gt;&lt;strong&gt;No of students selected&lt;/strong&gt; &lt;strong&gt;(2015)&lt;/strong&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td rowspan=&quot;3&quot; width=&quot;208&quot; data-blogger-escaped-style=&quot;border-top: none; border: solid windowtext 1.0pt; mso-border-alt: solid windowtext .5pt; mso-border-top-alt: solid windowtext .5pt; padding: 0in 5.4pt 0in 5.4pt; width: 155.8pt;&quot;&gt;MSc Engg (CSA)&lt;/td&gt; &lt;td width=&quot;208&quot; data-blogger-escaped-style=&quot;border-bottom: solid windowtext 1.0pt; border-left: none; border-right: solid windowtext 1.0pt; border-top: none; mso-border-alt: solid windowtext .5pt; mso-border-left-alt: solid windowtext .5pt; mso-border-top-alt: solid windowtext .5pt; padding: 0in 5.4pt 0in 5.4pt; width: 155.85pt;&quot;&gt;Theoretical CS&lt;/td&gt; &lt;td width=&quot;208&quot; data-blogger-escaped-style=&quot;border-bottom: solid windowtext 1.0pt; border-left: none; border-right: solid windowtext 1.0pt; border-top: none; mso-border-alt: solid windowtext .5pt; mso-border-left-alt: solid windowtext .5pt; mso-border-top-alt: solid windowtext .5pt; padding: 0in 5.4pt 0in 5.4pt; width: 155.85pt;&quot;&gt;2&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td width=&quot;208&quot; data-blogger-escaped-style=&quot;border-bottom: solid windowtext 1.0pt; border-left: none; border-right: solid windowtext 1.0pt; border-top: none; mso-border-alt: solid windowtext .5pt; mso-border-left-alt: solid windowtext .5pt; mso-border-top-alt: solid windowtext .5pt; padding: 0in 5.4pt 0in 5.4pt; width: 155.85pt;&quot;&gt;Computer Systems&lt;/td&gt; &lt;td width=&quot;208&quot; data-blogger-escaped-style=&quot;border-bottom: solid windowtext 1.0pt; border-left: none; border-right: solid windowtext 1.0pt; border-top: none; mso-border-alt: solid windowtext .5pt; mso-border-left-alt: solid windowtext .5pt; mso-border-top-alt: solid windowtext .5pt; padding: 0in 5.4pt 0in 5.4pt; width: 155.85pt;&quot;&gt;5&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td width=&quot;208&quot; data-blogger-escaped-style=&quot;border-bottom: solid windowtext 1.0pt; border-left: none; border-right: solid windowtext 1.0pt; border-top: none; mso-border-alt: solid windowtext .5pt; mso-border-left-alt: solid windowtext .5pt; mso-border-top-alt: solid windowtext .5pt; padding: 0in 5.4pt 0in 5.4pt; width: 155.85pt;&quot;&gt;Intelligent Systems&lt;/td&gt; &lt;td width=&quot;208&quot; data-blogger-escaped-style=&quot;border-bottom: solid windowtext 1.0pt; border-left: none; border-right: solid windowtext 1.0pt; border-top: none; mso-border-alt: solid windowtext .5pt; mso-border-left-alt: solid windowtext .5pt; mso-border-top-alt: solid windowtext .5pt; padding: 0in 5.4pt 0in 5.4pt; width: 155.85pt;&quot;&gt;1&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td colspan=&quot;2&quot; width=&quot;416&quot; data-blogger-escaped-style=&quot;border-top: none; border: solid windowtext 1.0pt; mso-border-alt: solid windowtext .5pt; mso-border-top-alt: solid windowtext .5pt; padding: 0in 5.4pt 0in 5.4pt; width: 311.65pt;&quot;&gt;PhD&lt;/td&gt; &lt;td width=&quot;208&quot; data-blogger-escaped-style=&quot;border-bottom: solid windowtext 1.0pt; border-left: none; border-right: solid windowtext 1.0pt; border-top: none; mso-border-alt: solid windowtext .5pt; mso-border-left-alt: solid windowtext .5pt; mso-border-top-alt: solid windowtext .5pt; padding: 0in 5.4pt 0in 5.4pt; width: 155.85pt;&quot;&gt;7&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td colspan=&quot;2&quot; width=&quot;416&quot; data-blogger-escaped-style=&quot;border-top: none; border: solid windowtext 1.0pt; mso-border-alt: solid windowtext .5pt; mso-border-top-alt: solid windowtext .5pt; padding: 0in 5.4pt 0in 5.4pt; width: 311.65pt;&quot;&gt;Total&lt;/td&gt; &lt;td width=&quot;208&quot; data-blogger-escaped-style=&quot;border-bottom: solid windowtext 1.0pt; border-left: none; border-right: solid windowtext 1.0pt; border-top: none; mso-border-alt: solid windowtext .5pt; mso-border-left-alt: solid windowtext .5pt; mso-border-top-alt: solid windowtext .5pt; padding: 0in 5.4pt 0in 5.4pt; width: 155.85pt;&quot;&gt;15&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;p&gt;All the best for everyone preparing for interviews. Have a good one! Feel free to contact me via the comments below or my mail for any queries that you may have or for improvements and corrections to the text above.&lt;/p&gt; &lt;p&gt;Oh and BTW, the MSc(Engg.) and M.E programs have been renamed M.Tech (Research) and M.Tech respectively effective academic year 2016-17.&lt;/p&gt; &lt;p&gt;Cheers! &lt;br /&gt; Arpith K&lt;/p&gt; &lt;p&gt;PS: I am currently perusing my MSc (Engg) at Indian Institute of Science in the department of computer Science and Automation (CSA).&lt;/p&gt; &lt;p&gt;A good friend of mine wrote a blog on their interview experience. Feel free to read it &lt;a href=&quot;http://adarshpatil.in/timewarp/blog/post-gate-admissions-2015.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; </description> <pubDate>Thu, 01 Oct 2015 13:42:32 +0530</pubDate> <link>http://arpith.xyz/2015/10/computer-science-research-interviews-iitm-and-iisc-cs/</link> <guid isPermaLink="true">http://arpith.xyz/2015/10/computer-science-research-interviews-iitm-and-iisc-cs/</guid> <category>lifelogging</category> <category>iisc</category> <category>interview</category> <category>blog</category> </item> <item> <title>Life Explained in 27 Seconds</title> <description>&lt;p&gt;&lt;img src=&quot;http://arpith.xyz/assets/iisc1.jpg&quot; alt=&quot;My helpful screenshot&quot; /&gt;&lt;/p&gt; &lt;iframe width=&quot;100%&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/CduA0TULnow&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt; &lt;h2 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h2&gt; &lt;div class=&quot;embed twitter&quot;&gt;&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;sv&quot; dir=&quot;ltr&quot;&gt;jekyll-twitter-plugin (1.0.0): A Liquid tag plugin for Jekyll that renders Tweets from Twitter API &lt;a href=&quot;http://t.co/m4EIQPM9h4&quot;&gt;http://t.co/m4EIQPM9h4&lt;/a&gt;&lt;/p&gt;&amp;mdash; RubyGems (@rubygems) &lt;a href=&quot;https://twitter.com/rubygems/status/518821243320287232&quot;&gt;October 5, 2014&lt;/a&gt;&lt;/blockquote&gt; &lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/div&gt; &lt;ul id=&quot;markdown-toc&quot;&gt; &lt;li&gt;&lt;a href=&quot;#table-of-contents&quot; id=&quot;markdown-toc-table-of-contents&quot;&gt;Table of Contents&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#this-is-a-header&quot; id=&quot;markdown-toc-this-is-a-header&quot;&gt;This is a header.&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#intro&quot; id=&quot;markdown-toc-intro&quot;&gt;intro&lt;/a&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;#test&quot; id=&quot;markdown-toc-test&quot;&gt;test&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;blockquote&gt; &lt;p&gt;Quote here.&lt;/p&gt; &lt;p&gt;– &lt;cite&gt;Benjamin Franklin&lt;/cite&gt;&lt;/p&gt; &lt;/blockquote&gt; &lt;blockquote&gt; &lt;h2 id=&quot;this-is-a-header&quot;&gt;This is a header.&lt;/h2&gt; &lt;ol&gt; &lt;li&gt;This is the first list item.&lt;/li&gt; &lt;li&gt;This is the second list item.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;Here’s some example code:&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;return shell_exec(&quot;echo $input | $markdown_script&quot;); &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/blockquote&gt; &lt;blockquote&gt; &lt;p&gt;This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.&lt;/p&gt; &lt;p&gt;Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing.&lt;/p&gt; &lt;/blockquote&gt; &lt;h2 id=&quot;intro&quot;&gt;intro&lt;/h2&gt; &lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt; &lt;h3 id=&quot;test&quot;&gt;test&lt;/h3&gt; &lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt; &lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://github.com/jekyll/jekyll-help&quot;&gt;Jekyll’s dedicated Help repository&lt;/a&gt;.&lt;/p&gt; </description> <pubDate>Thu, 09 Apr 2015 00:00:00 +0530</pubDate> <link>http://arpith.xyz/2015/04/life-in-27-seconds/</link> <guid isPermaLink="true">http://arpith.xyz/2015/04/life-in-27-seconds/</guid> <category>test</category> </item> </channel> </rss>